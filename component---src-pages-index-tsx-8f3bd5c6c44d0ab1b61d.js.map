{"version":3,"sources":["webpack://qnrjs42.blog/./src/pages/index.tsx"],"names":["search","location","data","edges","allMdx","file","publicURL","siteMetadata","childImageSharp","fluid","site","parsed","queryString","selectedCategory","category","title","description","url","siteUrl","image","posts"],"mappings":"sLA4DA,UA3BsC,SAAC,GAUhB,IATTA,EASQ,EATpBC,SAAYD,OASQ,IARpBE,KACYC,EAOQ,EAPlBC,OAAUD,MAOQ,IANlBE,KACEC,EAKgB,EALhBA,UAGMC,GAEU,EAJhBC,gBAAmBC,MAIH,EAFlBC,KAAQH,cAGJI,EAA8BC,QAAkBZ,GAChDa,EACuB,iBAApBF,EAAOG,UAA0BH,EAAOG,SAAmBH,EAAOG,SAAf,MAE5D,OACE,QAAC,IAAD,CACEC,MAAOR,EAAaQ,MACpBC,YAAaT,EAAaS,YAC1BC,IAAKV,EAAaW,QAClBC,MAAOb,IAEP,QAAC,IAAD,OACA,QAAC,IAAD,CAAUO,iBAAkBA,EAAkBO,MAAOjB","file":"component---src-pages-index-tsx-8f3bd5c6c44d0ab1b61d.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React, { FC } from 'react';\nimport queryString, { ParsedQuery } from 'query-string';\n\nimport Header from '@components/Common/Header';\nimport Template from '@components/Common/Template';\nimport PostList, { PostType } from '@components/Main/PostList';\nimport { ProfileImageProps } from '@components/Main/ProfileImage';\n\ninterface IndexPageProps {\n  location: {\n    search: string;\n  };\n  data: {\n    allMdx: {\n      edges: PostType[];\n    };\n    file: {\n      publicURL: string;\n      childImageSharp: {\n        fluid: ProfileImageProps['profileImage'];\n      };\n    };\n    site: {\n      siteMetadata: {\n        title: string;\n        siteUrl: string;\n        description: string;\n      };\n    };\n  };\n}\n\nconst IndexPage: FC<IndexPageProps> = ({\n  location: { search },\n  data: {\n    allMdx: { edges },\n    file: {\n      publicURL,\n      childImageSharp: { fluid },\n    },\n    site: { siteMetadata },\n  },\n}: IndexPageProps) => {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category ? 'All' : parsed.category;\n\n  return (\n    <Template\n      title={siteMetadata.title}\n      description={siteMetadata.description}\n      url={siteMetadata.siteUrl}\n      image={publicURL}\n    >\n      <Header />\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  );\n};\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    allMdx(sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }) {\n      edges {\n        node {\n          id\n          slug\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      publicURL\n      childImageSharp {\n        fluid(maxWidth: 120, maxHeight: 120, fit: INSIDE, quality: 100) {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}