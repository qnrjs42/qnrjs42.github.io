{"componentChunkName":"component---src-templates-post-template-tsx","path":"/javascript/convert-date","result":{"data":{"mdx":{"id":"bf3d5016-43d0-5b63-b211-47b71d033ef0","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2020-12-18\",\n  \"title\": \"[Javascript, Typescript] Convert Date\",\n  \"categories\": [\"Javascript\", \"Typescript\"],\n  \"summary\": \"3분 전, 2시간 전, 3일 전을 현재 시간과 비교하여 Date 포맷으로 컨버트\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"3\\uBD84 \\uC804, 2\\uC2DC\\uAC04 \\uC804, 3\\uC77C \\uC804\\uC744 \\uD604\\uC7AC \\uC2DC\\uAC04\\uACFC \\uBE44\\uAD50\\uD558\\uC5EC \\uB0A0\\uC9DC \\uAD6C\\uD558\\uB294 \\uBC29\\uBC95\"), mdx(\"p\", null, \"\\uC608\\uC2DC\\uB85C \\uD604\\uC7AC \\uB0A0\\uC9DC: 2020-12-18 16\\uC2DC 00\\uBD84\"), mdx(\"p\", null, \"'3\\uBD84 \\uC804' \\uBB38\\uC790\\uC5F4\\uC774 \\uB4E4\\uC5B4\\uC624\\uBA74 \\uB9AC\\uD134 \\uAC12\\uC740 2020-12-18 15\\uC2DC 57\\uBD84\\uC774 \\uB41C\\uB2E4.\"), mdx(\"p\", null, \"\\uD30C\\uB77C\\uBBF8\\uD130 \\uAC12 \\uD3EC\\uB9F7: string\", mdx(\"br\", null), \"\\n\\uB9AC\\uD134 \\uAC12 \\uD3EC\\uB9F7: Date\"), mdx(\"h2\", null, \"\\uAD6C\\uD604\\uB41C \\uB85C\\uC9C1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0\\uBD84 \\uC804\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0\\uC2DC\\uAC04 \\uC804\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0\\uC77C \\uC804\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC678\\uC5D0\\uB294 \\uC62C\\uBC14\\uB978 \\uB9AC\\uD134 \\uAC12\\uC744 \\uBCF4\\uB0B4\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Typescript\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"ts\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// 3\\uBD84 \\uC804, 10\\uBD84 \\uC804, 2\\uC2DC\\uAC04 \\uC804, 2\\uC77C \\uC804\\nconst convertDateFunc = (value: string) => {\\n  const valueDate: Date = new Date(value);\\n\\n  // \\uB0A0\\uC9DC \\uD615\\uD0DC\\uAC00 \\uC544\\uB2C8\\uB77C\\uBA74\\n  if (isNaN(valueDate.getDate())) {\\n    const valueDateSplit: string[] = value.split('');\\n    const valueDateFilter: string[] = valueDateSplit.filter((v: string) => {\\n      if (v === ' ' || v === '\\uC804') return false;\\n      else return true;\\n    });\\n\\n    let date: Date = new Date();\\n\\n    if (valueDateFilter.indexOf('\\uC77C') !== -1) {\\n      // \\uC77C\\n      const numberDate: string[] = valueDateFilter.filter((v) => {\\n        if (v === '\\uC77C') return false;\\n        else return true;\\n      });\\n      const time: number = parseInt(numberDate.join(''), 10);\\n      date.setDate(date.getDate() - time);\\n    } else if (valueDateFilter.indexOf('\\uC2DC') !== -1) {\\n      // \\uC2DC\\uAC04\\n      const numberDate: string[] = valueDateFilter.filter((v) => {\\n        if (v === '\\uC2DC' || v === '\\uAC04') return false;\\n        else return true;\\n      });\\n      const time: number = parseInt(numberDate.join(''), 10);\\n      date.setHours(date.getHours() - time);\\n    } else if (valueDateFilter.indexOf('\\uBD84') !== -1) {\\n      // \\uBD84\\n      const numberDate: string[] = valueDateFilter.filter((v) => {\\n        if (v === '\\uBD84') return false;\\n        else return true;\\n      });\\n      const time: number = parseInt(numberDate.join(''), 10);\\n      date.setMinutes(date.getMinutes() - time);\\n    }\\n    return date;\\n  }\\n  return valueDate;\\n};\"), \"\\n        \"), mdx(\"hr\", null), mdx(\"h2\", null, \"Javascript\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"js\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"const convertDateFunc = (value) => {\\n  const valueDate = new Date(value);\\n\\n  // \\uB0A0\\uC9DC \\uD615\\uD0DC\\uAC00 \\uC544\\uB2C8\\uB77C\\uBA74\\n  if (isNaN(valueDate.getDate())) {\\n    const valueDateSplit = value.split('');\\n    const valueDateFilter = valueDateSplit.filter((v) => {\\n      if (v === ' ' || v === '\\uC804') return false;\\n      else return true;\\n    });\\n\\n    let date = new Date();\\n\\n    if (valueDateFilter.indexOf('\\uC77C') !== -1) {\\n      // \\uC77C\\n      const numberDate = valueDateFilter.filter((v) => {\\n        if (v === '\\uC77C') return false;\\n        else return true;\\n      });\\n      const time = parseInt(numberDate.join(''), 10);\\n      date.setDate(date.getDate() - time);\\n    } else if (valueDateFilter.indexOf('\\uC2DC') !== -1) {\\n      // \\uC2DC\\uAC04\\n      const numberDate = valueDateFilter.filter((v) => {\\n        if (v === '\\uC2DC' || v === '\\uAC04') return false;\\n        else return true;\\n      });\\n      const time = parseInt(numberDate.join(''), 10);\\n      date.setHours(date.getHours() - time);\\n    } else if (valueDateFilter.indexOf('\\uBD84') !== -1) {\\n      // \\uBD84\\n      const numberDate = valueDateFilter.filter((v) => {\\n        if (v === '\\uBD84') return false;\\n        else return true;\\n      });\\n      const time = parseInt(numberDate.join(''), 10);\\n      date.setMinutes(date.getMinutes() - time);\\n    }\\n    return date;\\n  }\\n  return valueDate;\\n};\"), \"\\n        \"), mdx(\"p\", null, \"\\uCD9C\\uCC98: \\uB0B4 \\uBA38\\uB9AC\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"javascript/convert-date","frontmatter":{"title":"[Javascript, Typescript] Convert Date","summary":"3분 전, 2시간 전, 3일 전을 현재 시간과 비교하여 Date 포맷으로 컨버트","date":"2020-12-18","categories":["Javascript","Typescript"]}},"file":{"publicURL":"/static/278efc06a08028148932e21e3890c27b/profile-image.jpg"}},"pageContext":{"slug":"javascript/convert-date"}},"staticQueryHashes":[]}