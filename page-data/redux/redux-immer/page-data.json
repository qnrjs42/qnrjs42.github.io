{"componentChunkName":"component---src-templates-post-template-tsx","path":"/redux/redux-immer","result":{"data":{"mdx":{"id":"4c990283-4ce6-5138-b9f1-58f5e19fc306","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2020-09-17\",\n  \"title\": \"[Redux] 불변성 편하게 지키기(immer)\",\n  \"categories\": [\"Redux\"],\n  \"summary\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"jsx\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// reducers/user.js\\n\\nimport produce from 'immer';\\n\\nconst reducer = (state = initialState, action) => {\\n  return produce(state, (draft) => {\\n    switch (action.type) {\\n      case LOG_IN_REQUEST:\\n        draft.logInLoading = true;\\n        draft.logInError = null;\\n        draft.logInDone = false;\\n        break;\\n\\n        ...\\n    }\\n  });\\n};\"), \"\\n        \"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"redux/redux-immer","frontmatter":{"title":"[Redux] 불변성 편하게 지키기(immer)","summary":"","date":"2020-09-17","categories":["Redux"]}},"file":{"publicURL":"/static/278efc06a08028148932e21e3890c27b/profile-image.jpg"}},"pageContext":{"slug":"redux/redux-immer"}},"staticQueryHashes":[]}