{"version":3,"file":"component---src-pages-categories-index-tsx-92fa679c514645dc0154.js","mappings":"uRAcO,IAAMA,GAAqB,2KAYrBC,GAAa,qGAObC,GAAe,QAAO,cAAGC,OAAH,IAAcC,ECjClC,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDqB0B,aACjC,QAAC,EAAAM,KAASX,KADgB,qBAAH,mEAMR,qBAAGD,OAAuB,MAAQ,QAN1B,yBAQda,EAAAA,EARc,4GELzB,EAjB2D,YAGvD,IAFFC,EAEC,EAFDA,iBACAC,EACC,EADDA,aAEA,OACE,QAAClB,EAAD,MACE,QAACC,EAAD,KACGU,OAAOQ,QAAQD,GAAcE,KAAI,gBAAEC,EAAF,KAAQC,EAAR,YAChC,QAACpB,EAAD,CAAcqB,GAAE,aAAeF,EAAQlB,OAAQkB,IAASJ,EAAkBV,IAAKc,GAC5EA,EADH,IACUC,EADV,YCRVE,EAAAA,EAAAA,KAuBA,IAkDA,EAlDgD,SAAC,GAOrB,IANdC,EAMa,EANzBC,SAAYD,OAMa,IALzBE,KACYC,EAIa,EAJvBC,OAAUD,MACFE,EAGe,EAHvBC,KAAQD,UACAE,EAEe,EAFvBC,KAAQD,aAGJE,EAA8BC,EAAAA,MAAkBV,GAChDR,EACuB,iBAApBiB,EAAOE,UAA0BF,EAAOE,SAAmBF,EAAOE,SAAf,MAEtDlB,GAAemB,EAAAA,EAAAA,UACnB,kBACET,EAAMU,QACJ,SACEC,EADF,GAOM,IAHeC,EAGhB,EAJDC,KACEC,YAAeF,WAWnB,OAPAA,MAAAA,GAAAA,EAAYG,SAAQ,SAACP,QACIQ,IAAnBL,EAAKH,GAAyBG,EAAKH,GAAY,EAC9CG,EAAKH,QAGZG,EAAI,MAEGA,IAET,CAAEM,IAAK,MAEX,IAGF,OACE,QAACC,EAAA,EAAD,CACEC,MAAOf,EAAae,MACpBC,YAAahB,EAAagB,YAC1BC,IAAKjB,EAAakB,QAClBC,MAAOrB,IAEP,QAACsB,EAAA,EAAD,OACA,QAAC,EAAD,CAAcnC,iBAAkBA,EAAkBC,aAAcA,KAChE,QAACmC,EAAA,EAAD,CAAUpC,iBAAkBA,EAAkBqC,MAAO1B","sources":["webpack://qnrjs42.blog/./src/components/Main/CategoryList/styles.tsx","webpack://qnrjs42.blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://qnrjs42.blog/./src/components/Main/CategoryList/index.tsx","webpack://qnrjs42.blog/./src/pages/categories/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport { PurpleColor } from '@utils/utilColor';\n\ntype CategoryItemProps = {\n  active: boolean;\n};\n\ntype GatsbyLinkProps = {\n  children: React.ReactNode;\n  className?: string;\n  to: string;\n} & CategoryItemProps;\n\nexport const CategoryListContainer = styled.div`\n  display: flex;\n  width: 1024px;\n  margin: 0 auto;\n  margin-top: 30px;\n\n  @media (max-width: 1024px) {\n    width: 100%;\n    padding: 0 20px;\n  }\n`;\n\nexport const WrapperCenter = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: auto;\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))<CategoryItemProps>`\n  margin-right: 20px;\n  margin-bottom: 10px;\n  font-size: 1em;\n  font-weight: ${({ active }) => (active ? '800' : '400')};\n  cursor: pointer;\n  color: ${PurpleColor};\n\n  background-color: rgb(241, 243, 245);\n  border-radius: 1rem;\n  padding: 5px 10px;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n`;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { FunctionComponent } from 'react';\n\nimport { CategoryItem, CategoryListContainer, WrapperCenter } from './styles';\n\nexport interface CategoryListProps {\n  selectedCategory: string;\n  categoryList: {\n    [key: string]: number;\n  };\n}\n\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\n  selectedCategory,\n  categoryList,\n}) {\n  return (\n    <CategoryListContainer>\n      <WrapperCenter>\n        {Object.entries(categoryList).map(([name, count]) => (\n          <CategoryItem to={`?category=${name}`} active={name === selectedCategory} key={name}>\n            {name}({count})\n          </CategoryItem>\n        ))}\n      </WrapperCenter>\n    </CategoryListContainer>\n  );\n};\n\nexport default CategoryList;\n","import { graphql } from 'gatsby';\nimport React, { FC, useMemo } from 'react';\nimport queryString, { ParsedQuery } from 'query-string';\nimport { defineCustomElements as deckDeckGoHighlightElement } from '@deckdeckgo/highlight-code/dist/loader';\n\nimport Header from '@components/Common/Header';\nimport Template from '@components/Common/Template';\nimport PostList, { PostType } from '@components/Main/PostList';\nimport { ProfileImageProps } from '@components/Main/ProfileImage';\nimport CategoryList, { CategoryListProps } from '@components/Main/CategoryList';\n\ndeckDeckGoHighlightElement();\n\ninterface CategoriesPageProps {\n  location: {\n    search: string;\n  };\n  data: {\n    allMdx: {\n      edges: PostType[];\n    };\n    file: {\n      publicURL: string;\n    };\n    site: {\n      siteMetadata: {\n        title: string;\n        siteUrl: string;\n        description: string;\n      };\n    };\n  };\n}\n\nconst CategoriesPage: FC<CategoriesPageProps> = ({\n  location: { search },\n  data: {\n    allMdx: { edges },\n    file: { publicURL },\n    site: { siteMetadata },\n  },\n}: CategoriesPageProps) => {\n  const parsed: ParsedQuery<string> = queryString.parse(search);\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category ? 'All' : parsed.category;\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostType,\n        ) => {\n          categories?.forEach((category) => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  );\n\n  return (\n    <Template\n      title={siteMetadata.title}\n      description={siteMetadata.description}\n      url={siteMetadata.siteUrl}\n      image={publicURL}\n    >\n      <Header />\n      <CategoryList selectedCategory={selectedCategory} categoryList={categoryList} />\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  );\n};\nexport default CategoriesPage;\n\nexport const getCategoriesList = graphql`\n  query getCategoriesList {\n    allMdx(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n      filter: { frontmatter: { categories: { ne: null } } }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      publicURL\n    }\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n      }\n    }\n  }\n`;\n"],"names":["CategoryListContainer","WrapperCenter","CategoryItem","active","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","Link","PurpleColor","selectedCategory","categoryList","entries","map","name","count","to","deckDeckGoHighlightElement","search","location","data","edges","allMdx","publicURL","file","siteMetadata","site","parsed","queryString","category","useMemo","reduce","list","categories","node","frontmatter","forEach","undefined","All","Template","title","description","url","siteUrl","image","Header","PostList","posts"],"sourceRoot":""}